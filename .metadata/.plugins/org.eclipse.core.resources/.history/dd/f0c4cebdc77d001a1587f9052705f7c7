package git_Demo;

public class demo {

	public static void main(String[] args) {
		/*
		 * i have video file --> i want to share it to ABhi --> pendrive -- Not better
		 * option Upload it into cloud.. Googles drive, Third party cloud space, I say i
		 * will give link: See the content of it. part_1 + Part_2 .ppt 10 slides + if
		 * you start creating another 2 shared to him
		 */

		// GIT : version control system for tracking changes in source code in
		// development activity
		// Repo : place where you can store your code

		System.out.println("Im learning git today");
		// GIT HUB --> GIT tool ,
		//
		// Our code to cloud.. Moving my git_Demo project to cloud
		// if i have to move one project --> Separate repository under git hub to
		// maintain all projects in different folder
		// how do you we create repository --> learnt
		// How do you push your code to Repository
		// git init -->
		// 1. Git set up to project is not done --> First we have to intialise the git
		// to the project
		// Git is intialised and it is ready to transfer the code to cloud
		// 3 steps are there (Copy your code to local git repo and then same thing push
		// it Cloud Repo)
		// Red -- Nothing is Saved
		// Green --> selected file is saved
		// Git add --> It will save the code
		// Git commit --> It will commit to the local git Repo
		// When you say git commit --> All the commited files will be there in localgit
		// repo
		// Now you have to set which repository to be saved --> git remote add
		// Git Push --> It will commit/Pushed to the cloud Repo
		// git push success
		// git add, git commit, git push , git status
		//
		// MASTER
		// Other members will be engage in coding. Root of the project and then we will
		// create a branches for individual person
		// differentiang by using branching
		// Master --> head
		// Git branch <branch name>
		// git checkout <branch name>

		// as i faced conflict i given a chance to user to correct him self.
		// Im keeping below statements after merge
		// im on nidhi branch
		System.out.println("give me conflict here to  in Sri branch");
		// Will be back after 12:30PM PST
		// git Merge --> 2 branches --> more than 2 --> merge only 2 branches at a given
		// time
		// one which im currently working and another whichever you wants to merge with
		// im on branch sri
		//
		/*
		 * 
		 * Sri branch::
		 * 
		 * System.out.println("Im making changes in sri branch"); //Will be back after
		 * 12:30PM PST //git Merge --> 2 branches --> more than 2 --> merge only 2
		 * branches at a given time //one which im currently working and another
		 * whichever you wants to merge with //im on branch sri //
		 * 
		 * System.out.println("Im making changes in nidhi branch");
		 * 
		 * 
		 * Merge sri branch to nidhi branch
		 * 
		 * nidhi+sri
		 * 
		 * Always you have to maintain your latest code in master..
		 * 
		 * Before merging with any branch. There should not be any uncommited files
		 * should be there in the branch
		 * 
		 * company standards: 1. an automation resource should 10 scripts per day 2. in
		 * team you have 5 resource --> per day how many script will be there 50 script
		 * 3. At the EOD or bigning of the Day ... We have to merge. Weekly once. when
		 * the need is there. 4. merging from one branch of non-master to yours can be
		 * done by you. 5. Merging to master is always done by senior person also it
		 * varies the time(weekly,Dialy,Bi-weekly) 6. Sri branch some imp code is there.
		 * And nidhi wants that code. nidhi will merge with sri 7. MASTER --> Automation
		 * Qa team. manual guys script ---> MASTER
		 * 
		 * --> Blocked in master branch -->
		 * 
		 * 
		 * sri nidhi sri code into nidhi nidhi code into master
		 * 
		 * nidhi ---> he can continue same branch ---> he has to pull master --> but you
		 * may get conflicts sri ---> he can continue same branch ---> he has to pull
		 * master --> but you may get conflicts
		 * 
		 * 
		 */

	}

}
